import logging
import os
import asyncio
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.client.default import DefaultBotProperties
from flask import Flask
from threading import Thread
import sys

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
CHAT_ID = -1002011048351  # ID —á–∞—Ç–∞ (—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª–∞)
TOPIC_ID = 108214         # ID —Ç–æ–ø–∏–∫–∞ "–ó–∞—è–≤–∫–∏ —Å –ú–∞–Ω–¥—É–ª—ã"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not API_TOKEN:
    logging.error("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    sys.exit(1)

app = Flask(__name__)
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
bot_started = False
flask_started = False

async def reset_connection():
    """–ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –≤—Å–µ—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        logging.info("–í–µ–±—Ö—É–∫ —É–¥–∞–ª–µ–Ω")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–µ–±—Ö—É–∫–∞: {e}")
    
    try:
        response = requests.post(f"https://api.telegram.org/bot{API_TOKEN}/deleteWebhook", timeout=10)
        if response.status_code == 200:
            logging.info("–í–µ–±—Ö—É–∫ —É–¥–∞–ª–µ–Ω —á–µ—Ä–µ–∑ API")
        else:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤–µ–±—Ö—É–∫ —á–µ—Ä–µ–∑ API: {response.status_code}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–µ–±—Ö—É–∫–∞ —á–µ—Ä–µ–∑ API: {e}")

@app.route('/')
def home():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    global flask_started
    return f"–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω. Flask: {flask_started}, Bot: {bot_started}"

@app.route('/health')
def health():
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    global bot_started, flask_started
    if flask_started:
        return "OK", 200
    else:
        return "Starting...", 202  # 202 Accepted –≤–º–µ—Å—Ç–æ 503

@app.route('/ping')
def ping():
    """–ü—Ä–æ—Å—Ç–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–∏–Ω–≥–∞"""
    return "pong", 200

def format_user(user: types.User) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    if user.username:
        return f"@{user.username}"
    else:
        full_name = f"{user.first_name or ''} {user.last_name or ''}".strip()
        return f"<a href='tg://user?id={user.id}'>{full_name}</a>"

@dp.message()
async def handle_message(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        if message.chat.type == "private":
            user_info = format_user(message.from_user)
            text_to_send = f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ\nüë§ {user_info}\n\n{message.text}"
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ç–æ–ø–∏–∫ —á–∞—Ç–∞
            await bot.send_message(
                chat_id=CHAT_ID,
                message_thread_id=TOPIC_ID,
                text=text_to_send
            )
            await message.reply("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Ç–æ–ø–∏–∫ '–ó–∞—è–≤–∫–∏ —Å –ú–∞–Ω–¥—É–ª—ã'")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def start_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    global bot_started
    try:
        await reset_connection()
        logging.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã, –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥...")
        
        bot_started = True
        await dp.start_polling(
            bot,
            skip_updates=True,
            timeout=30,
            relax=0.5
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        bot_started = False

def run_flask():
    """–ó–∞–ø—É—Å–∫ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    global flask_started
    try:
        port = int(os.environ.get("PORT", 10000))
        logging.info(f"–ó–∞–ø—É—Å–∫ Flask –Ω–∞ –ø–æ—Ä—Ç—É {port}")
        flask_started = True
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º production-ready —Å–µ—Ä–≤–µ—Ä –≤–º–µ—Å—Ç–æ development
        from waitress import serve
        serve(app, host='0.0.0.0', port=port)
    except ImportError:
        # –ï—Å–ª–∏ waitress –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π Flask
        app.run(host='0.0.0.0', port=port, debug=False, threaded=True)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    logging.info("–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    
    # –ó–∞–ø—É—Å–∫ Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    flask_thread = Thread(target=run_flask, daemon=True)
    flask_thread.start()
    logging.info("Flask –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ")
    
    # –î–∞–µ–º Flask –≤—Ä–µ–º—è –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
    await asyncio.sleep(3)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logging.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
    await start_bot()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
