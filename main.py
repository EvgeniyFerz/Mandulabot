import os
import logging
import asyncio
import datetime
import requests

from flask import Flask, request

from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import CommandStart
from aiogram.types import Update

# ======== –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ========
API_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
CHANNEL_ID = os.getenv("TELEGRAM_CHANNEL_ID")
WEBHOOK_HOST = os.getenv("REPLIT_URL")  # –∏–ª–∏ https://–Ω–∞–∑–≤–∞–Ω–∏–µ-–ø—Ä–æ–µ–∫—Ç–∞.onrender.com
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

# ======== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ========
logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
app = Flask(__name__)

# ======== Flask –º–∞—Ä—à—Ä—É—Ç—ã ========
@app.route("/")
def index():
    return f"<h1>–ë–æ—Ç @Mandula_robot –Ω–∞ Webhook</h1><p>{datetime.datetime.now()}</p>"

@app.route(WEBHOOK_PATH, methods=["POST"])
async def webhook():
    try:
        request_data = request.get_data().decode("utf-8")
        update = Update.model_validate_json(request_data)
        await dp.feed_update(bot, update)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ webhook: {e}")
    return {"status": "ok"}

# ======== –•–µ–Ω–¥–ª–µ—Ä—ã ========
async def handle_start(message: types.Message):
    welcome_text = (
        "–≠—Ç–æ –±–æ—Ç <b>Mandula corporation</b> (https://t.me/mandula_corporation) ‚Äî –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –ñ–¶–ê-–ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏ –∏ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—è.\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:\n"
        "- —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à –∫–∞–Ω–∞–ª\n"
        "- —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤–∑—è—Ç—å (–ª–µ–Ω—Ç–∞, —Ä–∞—Å—Å—ã–ª–∫–∞, —Å—Ç–æ—Ä–∏–∑)\n"
        "- –≥–¥–µ —Ö–æ—Ç–∏—Ç–µ –≤–∑—è—Ç—å ‚Äî –≤–æ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–∞—Ö –∏–ª–∏ —Ç–æ–ª—å–∫–æ –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö"
    )
    await message.reply(welcome_text)

async def handle_message(message: types.Message):
    if message.chat.type != "private":
        return

    user = message.from_user
    username = f"@{user.username}" if user.username else "–±–µ–∑ username"
    user_info = f"üë§ {user.full_name} ({username})"

    if message.text:
        await bot.send_message(CHANNEL_ID, f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ\n\n{user_info}\n\n{message.text}")
    elif message.photo:
        await bot.send_photo(CHANNEL_ID, message.photo[-1].file_id, caption=f"üì∑ –§–æ—Ç–æ\n\n{user_info}")
    elif message.document:
        await bot.send_document(CHANNEL_ID, message.document.file_id, caption=f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç\n\n{user_info}")

    await message.reply("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!")

# ======== –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ ========
dp.message.register(handle_start, CommandStart())
dp.message.register(handle_message, F.chat.type == "private")

# ======== –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Webhook –∏ –∑–∞–ø—É—Å–∫ ========
async def on_startup():
    await bot.set_webhook(WEBHOOK_URL)
    logging.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

async def main():
    await on_startup()
    app.run(host="0.0.0.0", port=8080)

if __name__ == "__main__":
    asyncio.run(main())
