import logging
import os
import asyncio
import datetime
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.client.session.aiohttp import AiohttpSession
from flask import Flask
from threading import Thread

# ======== –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ========
API_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
CHANNEL_ID = os.getenv("TELEGRAM_CHANNEL_ID")
RENDER_URL = "https://mandulabot.onrender.com"

# ======== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask ========
app = Flask(__name__)

@app.route('/')
def home():
    return f"""
    <h1>–ë–æ—Ç @Mandula_robot –∞–∫—Ç–∏–≤–µ–Ω</h1>
    <p>–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
    <p>–°—Ç–∞—Ç—É—Å: <span style="color:green;">‚úî –û–Ω–ª–∞–π–Ω</span></p>
    """

# ======== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ========
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[logging.StreamHandler()]
)

# –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
session = AiohttpSession(api_timeout=30)
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML), session=session)
dp = Dispatcher()

# ======== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π ========
@dp.message()
async def handle_message(message: types.Message):
    try:
        if message.chat.type != "private":
            return

        user = message.from_user
        username = f"@{user.username}" if user.username else user.id
        user_info = f"üë§ {user.full_name} (ID: {user.id}, {username})"

        if message.text:
            await bot.send_message(CHANNEL_ID, f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ\n\n{user_info}\n\n{message.text}")
        elif message.photo:
            await bot.send_photo(CHANNEL_ID, message.photo[-1].file_id, caption=f"üì∑ –§–æ—Ç–æ\n\n{user_info}")
        elif message.document:
            await bot.send_document(CHANNEL_ID, message.document.file_id, caption=f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç\n\n{user_info}")

        await message.reply("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)
        await message.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# ======== –ó–∞–ø—É—Å–∫ —Å –ø–æ–ª–Ω–æ–π –∑–∞—â–∏—Ç–æ–π ========
async def reset_telegram_session():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å –≤—Å–µ—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
    try:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–µ—Å—Å–∏–∏
        await bot.session.close()
        await asyncio.sleep(2)
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º webhook –∏ updates —á–µ—Ä–µ–∑ Telegram API
        await bot.delete_webhook(drop_pending_updates=True)
        await bot.get_updates(offset=-1)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π HTTP-—Å–±—Ä–æ—Å
        requests.post(f"https://api.telegram.org/bot{API_TOKEN}/close", timeout=5)
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å–µ—Å—Å–∏–∏: {e}")

async def bot_runner():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    await reset_telegram_session()
    
    while True:
        try:
            logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –Ω–æ–≤—ã–º —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º —Å–µ—Å—Å–∏–∏...")
            await dp.start_polling(
                bot,
                none_stop=True,
                allowed_updates=dp.resolve_used_update_types(),
                timeout=25,
                relax=0.3,
                reset_webhook=True
            )
        except asyncio.CancelledError:
            logging.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
            break
        except Exception as e:
            logging.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {type(e).__name__}: {e}", exc_info=True)
            await asyncio.sleep(10)
            await reset_telegram_session()

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
    # –ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞
    flask_thread = Thread(
        target=lambda: app.run(host='0.0.0.0', port=8080, debug=False, use_reloader=False),
        daemon=True
    )
    flask_thread.start()

    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã
    try:
        await bot_runner()
    finally:
        logging.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        await bot.session.close()
        await asyncio.sleep(1)

if __name__ == "__main__":
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å —á–µ—Ä–µ–∑ API –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    try:
        requests.post(f"https://api.telegram.org/bot{API_TOKEN}/deleteWebhook", timeout=3)
        requests.post(f"https://api.telegram.org/bot{API_TOKEN}/close", timeout=3)
    except:
        pass

    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logging.info("–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞")
    except Exception as e:
        logging.critical(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {type(e).__name__}: {e}", exc_info=True)
    finally:
        logging.info("‚úÖ –†–∞–±–æ—Ç–∞ –±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
