import logging
import os
import asyncio
import datetime
import requests
import time
from threading import Thread
from flask import Flask

from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import CommandStart
from aiogram.types import Message

# ======== –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ========
API_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
CHANNEL_ID = os.getenv("TELEGRAM_CHANNEL_ID")
REPLIT_URL = "https://mandulabot.onrender.com/"  # –ü—É–±–ª–∏—á–Ω—ã–π URL

# ======== Flask-—Å–µ—Ä–≤–µ—Ä ========
app = Flask(__name__)

@app.route('/')
def home():
    return f"""
    <h1>–ë–æ—Ç @Mandula_robot –∞–∫—Ç–∏–≤–µ–Ω</h1>
    <p>–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
    <p>–°—Ç–∞—Ç—É—Å: <span style="color:green;">‚úî –û–Ω–ª–∞–π–Ω</span></p>
    """

# ======== –ê–≤—Ç–æ–ø–∏–Ω–≥ ========
def keep_alive():
    while True:
        try:
            requests.get(REPLIT_URL, timeout=5)
            logging.info("–ü–∏–Ω–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –ø–∏–Ω–≥–∞: {e}")
        time.sleep(300)  # –ü–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

# ======== –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ========
logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# ======== –•–µ–Ω–¥–ª–µ—Ä /start ========
async def handle_start(message: Message):
    welcome_text = (
        "–≠—Ç–æ –±–æ—Ç <b>Mandula corporation</b> (https://t.me/mandula_corporation) ‚Äî –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –ñ–¶–ê-–ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏ –∏ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—è.\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:\n"
        "- —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à –∫–∞–Ω–∞–ª\n"
        "- —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤–∑—è—Ç—å (–ª–µ–Ω—Ç–∞, —Ä–∞—Å—Å—ã–ª–∫–∞, —Å—Ç–æ—Ä–∏–∑)\n"
        "- –≥–¥–µ —Ö–æ—Ç–∏—Ç–µ –≤–∑—è—Ç—å ‚Äî –≤–æ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–∞—Ö –∏–ª–∏ —Ç–æ–ª—å–∫–æ –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö"
    )
    await message.reply(welcome_text)

# ======== –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è ========
async def handle_message(message: Message):
    try:
        if message.chat.type != "private":
            return

        user = message.from_user
        username = f"@{user.username}" if user.username else "–±–µ–∑ username"
        user_info = f"üë§ {user.full_name} ({username})"

        if message.text:
            await bot.send_message(CHANNEL_ID, f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ\n\n{user_info}\n\n{message.text}")
        elif message.photo:
            await bot.send_photo(CHANNEL_ID, message.photo[-1].file_id, caption=f"üì∑ –§–æ—Ç–æ\n\n{user_info}")
        elif message.document:
            await bot.send_document(CHANNEL_ID, message.document.file_id, caption=f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç\n\n{user_info}")

        await message.reply("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
        await message.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# ======== –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ ========
dp.message.register(handle_start, CommandStart())
dp.message.register(handle_message, F.chat.type == "private")

# ======== –ó–∞–ø—É—Å–∫ ========
async def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask-—Å–µ—Ä–≤–µ—Ä
    Thread(target=lambda: app.run(host='0.0.0.0', port=8080), daemon=True).start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–ø–∏–Ω–≥
    Thread(target=keep_alive, daemon=True).start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
